#include "clss\Millenium.h"
#include "Menu.h"

int WinMain() {
	RenderWindow window(VideoMode(544, 576), "Digger", Style::Titlebar | Style::Close);
	Digger player;
	player.SetLifes(3);
	std::vector<std::string> Scores(5);
	std::ifstream Score_file("Score_board.txt");
	for (int i = 0; i < 5; i++)
		std::getline(Score_file, Scores.at(i));
	Score_file.close();
	int chose = 4, Score = 0, level_num = 1;
	char level[17][17] = { 0 };
	bool difficulty = true, bullets = true;
	do {
		switch (chose) {
		case 1:
			Map_From_File(level, level_num);
			Game_lvl(window, level, player, difficulty, bullets, chose, level_num, Score);
			if (player.GetLifes() <= 0 || level_num == 9) {
				AddToScoreBoard(window, Score, Scores, chose);
				player.SetLifes(difficulty ? 3 : 1);
				Score = 0;
				chose = 4;
			}
			break;
		case 2:
			Options(window, difficulty, bullets, chose);
			player.SetLifes(difficulty ? 3 : 1);
			break;
		case 3:
			ShowScoreBoard(window, chose, Scores);
			break;
		case 4:
			Menu(window, chose);
			break;
		}
	} while (chose != 5);
	remove("Screen.png");
	return 0;
}
//
//#include <fstream>
//#include <iostream>
//
//int main() {
//	std::ofstream file_1("level_10.bin",std::ios::binary);
//	int tmp = 0;
//	int i = 0, j = 0;
//	//int level[17][17] =
//	//{
//	//		 0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //1
//	//		 0,   18,   0,   17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  0, //2
//	//		 0,   18,   0,   17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  0, //3
//	//		 0,   0,    0,   17,  17,  17,  17,  17,  17, -1,   17,  17,  17,  17,  17,  17,  0, //4
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  1,   17,  17,  17,  17,  17,  17,  0, //5
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  0, //6
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  0, //7
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //8
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //9
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //10
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //11
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //12
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //13
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //14
//	//		 0,   -1,   -1,  -1,  -1,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  17,  0, //15
//	//		 0,   17,   17,  17,  17,  17,  17,  17,  17,  19,  17,  17,  17,  17,  17,  20,  0, //16
//	//		 0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //17
//	//};
//	int level[17][17]{
//			0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, //1
//			0,	18, 18,	0,  19, 19, 19, 0,  17, 17, 17, 17, 17, 17, 17, 17, 0, //2
//			0,	17, 0,	17, 17, 0,  0,  0,  17, 0,  0,  0,  0,  0,  0,  17, 0, //3
//			0,	17,	0,	17, 0,  0,  -1, 0,  17, 19, 0,  17, 17, 17, 0,  19, 0, //4
//			0,	17, 0,  17, 17, 0,  19, 0,  17, 0,	0,  17, 0,  17, 0,  19, 0, //5
//			0,	17, 0,  0,  17, 0,  19, 17, 17, 17, 17, 17, 0,  17, 0,  19, 0, //6
//			0,	17, 17, 0,  17, 0,  19, 0,  0,  0,  0,  0,  0,  17, 0,  0,  0, //7
//			0,	0,  17, 0,  17, 0,  19, 0,  17, 0,  17, 17, 17, 17, 17, -1, 0, //8
//			0,	19, 17, 0,  17, 0,  19, 0,  17, 17, 17, 0,  0,  0,  0,  17, 0, //9
//			0,	0,  17, 0,  17, 0,  0,  0,  0,  17, 0,  0,  0,  17, 17, 17, 0, //10
//			0,	19, 17, 17, 17, 17, 0,  19, 0,  17, 0,  19, 0,  17, 0,  17, 0, //11
//			0,	0,  0,	0,	0,  17, 0,  17, 17, 17, 17, 19, 19, 17, 0,  17, 0, //12
//			0,	17, 19, 19, 0,  17, 0,  17, 0,  0,  17, 0,  0,  17, 0,  17, 0, //13
//			0,	17, 0,  19, 0,	17, 17, 17, 0,  19, 17, 0,  -1, 17, 0,  17, 0, //14
//			0,	17, 0,  0,  0,  0,  0,  17, 0,  0,  17, 0,  17, 0,  0,  17, 0, //15
//			0,	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 0, //16
//			0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, //17
//	};
//	file_1.write((char*)level, sizeof(level));
//	file_1.close();
//	std::ifstream file_2("level_10.bin", std::ios::binary);
//	char level_10[17][17] = { 0 };
//	while (file_2.read((char*)& tmp, sizeof(tmp))) {
//		level_10[i][j] = tmp;
//		j++;
//		if (j == 17) {
//			j = 0;
//			i++;
//		}
//		if (i == 17) {
//			break;
//		}
//	}
//	file_2.close();
//	for (size_t i = 0; i < 17; i++) {
//		for (size_t j = 0; j < 17; j++) {
//			std::cout << (int)level_10[i][j] << "  ";
//		}
//		std::cout << std::endl;
//	}
//}